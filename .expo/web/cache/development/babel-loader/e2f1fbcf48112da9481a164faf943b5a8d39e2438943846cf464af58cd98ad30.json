{"ast":null,"code":"var _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\nvar express = require('express');\nvar router = express.Router();\nvar bcrypt = require('bcryptjs');\nvar jwt = require('jsonwebtoken');\nvar User = require(\"../models/user.js\");\nrouter.post('/login', function () {\n  var _ref = _asyncToGenerator(function* (req, res) {\n    var _req$body = req.body,\n      email = _req$body.email,\n      password = _req$body.password;\n    try {\n      var user = yield User.findOne({\n        email: email\n      });\n      if (!user) {\n        return res.status(400).json({\n          alert: 'Utilisateur non trouvé'\n        });\n      }\n      var isMatch = yield bcrypt.compare(password, user.password);\n      if (!isMatch) {\n        return res.status(400).json({\n          alert: 'Mot de passe incorrect'\n        });\n      }\n      var token = jwt.sign({\n        id: user._id\n      }, 'your_jwt_secret', {\n        expiresIn: '1h'\n      });\n      res.json({\n        token: token\n      });\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Erreur du serveur');\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nrouter.post('/register', function () {\n  var _ref2 = _asyncToGenerator(function* (req, res) {\n    var _req$body2 = req.body,\n      name = _req$body2.name,\n      email = _req$body2.email,\n      password = _req$body2.password,\n      city = _req$body2.city;\n    try {\n      var user = yield User.findOne({\n        email: email\n      });\n      if (user) {\n        return res.status(400).json({\n          alert: 'Utilisateur déjà existant'\n        });\n      }\n      user = new User({\n        name: name,\n        email: email,\n        password: password,\n        city: city\n      });\n      var salt = yield bcrypt.genSalt(10);\n      user.password = yield bcrypt.hash(password, salt);\n      yield user.save();\n      var token = jwt.sign({\n        id: user._id\n      }, 'your_jwt_secret', {\n        expiresIn: '1h'\n      });\n      res.json({\n        token: token\n      });\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Erreur du serveur');\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","bcrypt","jwt","User","post","_ref","_asyncToGenerator","req","res","_req$body","body","email","password","user","findOne","status","json","alert","isMatch","compare","token","sign","id","_id","expiresIn","err","console","error","message","send","_x","_x2","apply","arguments","_ref2","_req$body2","name","city","salt","genSalt","hash","save","_x3","_x4","module","exports"],"sources":["/Users/matveitabelev/Desktop/TROQUANTE/MonProjet/Backend/routes/routeUser.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst User = require('../models/user.js'); // Assurez-vous que le chemin vers votre modèle User est correct\n\n// Route de connexion\nrouter.post('/login', async (req, res) => {\n    const { email, password } = req.body;\n\n    try {\n        const user = await User.findOne({ email });\n        if (!user) {\n            return res.status(400).json({ alert: 'Utilisateur non trouvé' });\n        }\n\n        const isMatch = await bcrypt.compare(password, user.password);\n        if (!isMatch) {\n            return res.status(400).json({ alert: 'Mot de passe incorrect' });\n        }\n\n        const token = jwt.sign({ id: user._id }, 'your_jwt_secret', { expiresIn: '1h' });\n        res.json({ token });\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Erreur du serveur');\n    }\n});\n\n// Route d'inscription\nrouter.post('/register', async (req, res) => {\n    const { name, email, password, city } = req.body;\n\n    try {\n        let user = await User.findOne({ email });\n        if (user) {\n            return res.status(400).json({ alert: 'Utilisateur déjà existant' });\n        }\n\n        user = new User({\n            name,\n            email,\n            password,\n            city\n        });\n\n        const salt = await bcrypt.genSalt(10);\n        user.password = await bcrypt.hash(password, salt);\n        await user.save();\n\n        const token = jwt.sign({ id: user._id }, 'your_jwt_secret', { expiresIn: '1h' });\n        res.json({ token });\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Erreur du serveur');\n    }\n});\n\nmodule.exports = router;\n"],"mappings":";AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,IAAMC,MAAM,GAAGH,OAAO,CAAC,UAAU,CAAC;AAClC,IAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACnC,IAAMK,IAAI,GAAGL,OAAO,oBAAoB,CAAC;AAGzCC,MAAM,CAACK,IAAI,CAAC,QAAQ;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOC,GAAG,EAAEC,GAAG,EAAK;IACtC,IAAAC,SAAA,GAA4BF,GAAG,CAACG,IAAI;MAA5BC,KAAK,GAAAF,SAAA,CAALE,KAAK;MAAEC,QAAQ,GAAAH,SAAA,CAARG,QAAQ;IAEvB,IAAI;MACA,IAAMC,IAAI,SAASV,IAAI,CAACW,OAAO,CAAC;QAAEH,KAAK,EAALA;MAAM,CAAC,CAAC;MAC1C,IAAI,CAACE,IAAI,EAAE;QACP,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyB,CAAC,CAAC;MACpE;MAEA,IAAMC,OAAO,SAASjB,MAAM,CAACkB,OAAO,CAACP,QAAQ,EAAEC,IAAI,CAACD,QAAQ,CAAC;MAC7D,IAAI,CAACM,OAAO,EAAE;QACV,OAAOV,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAAyB,CAAC,CAAC;MACpE;MAEA,IAAMG,KAAK,GAAGlB,GAAG,CAACmB,IAAI,CAAC;QAAEC,EAAE,EAAET,IAAI,CAACU;MAAI,CAAC,EAAE,iBAAiB,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MAChFhB,GAAG,CAACQ,IAAI,CAAC;QAAEI,KAAK,EAALA;MAAM,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1BpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC,mBAAmB,CAAC;IAC7C;EACJ,CAAC;EAAA,iBAAAC,EAAA,EAAAC,GAAA;IAAA,OAAA1B,IAAA,CAAA2B,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAGFlC,MAAM,CAACK,IAAI,CAAC,WAAW;EAAA,IAAA8B,KAAA,GAAA5B,iBAAA,CAAE,WAAOC,GAAG,EAAEC,GAAG,EAAK;IACzC,IAAA2B,UAAA,GAAwC5B,GAAG,CAACG,IAAI;MAAxC0B,IAAI,GAAAD,UAAA,CAAJC,IAAI;MAAEzB,KAAK,GAAAwB,UAAA,CAALxB,KAAK;MAAEC,QAAQ,GAAAuB,UAAA,CAARvB,QAAQ;MAAEyB,IAAI,GAAAF,UAAA,CAAJE,IAAI;IAEnC,IAAI;MACA,IAAIxB,IAAI,SAASV,IAAI,CAACW,OAAO,CAAC;QAAEH,KAAK,EAALA;MAAM,CAAC,CAAC;MACxC,IAAIE,IAAI,EAAE;QACN,OAAOL,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACC,IAAI,CAAC;UAAEC,KAAK,EAAE;QAA4B,CAAC,CAAC;MACvE;MAEAJ,IAAI,GAAG,IAAIV,IAAI,CAAC;QACZiC,IAAI,EAAJA,IAAI;QACJzB,KAAK,EAALA,KAAK;QACLC,QAAQ,EAARA,QAAQ;QACRyB,IAAI,EAAJA;MACJ,CAAC,CAAC;MAEF,IAAMC,IAAI,SAASrC,MAAM,CAACsC,OAAO,CAAC,EAAE,CAAC;MACrC1B,IAAI,CAACD,QAAQ,SAASX,MAAM,CAACuC,IAAI,CAAC5B,QAAQ,EAAE0B,IAAI,CAAC;MACjD,MAAMzB,IAAI,CAAC4B,IAAI,CAAC,CAAC;MAEjB,IAAMrB,KAAK,GAAGlB,GAAG,CAACmB,IAAI,CAAC;QAAEC,EAAE,EAAET,IAAI,CAACU;MAAI,CAAC,EAAE,iBAAiB,EAAE;QAAEC,SAAS,EAAE;MAAK,CAAC,CAAC;MAChFhB,GAAG,CAACQ,IAAI,CAAC;QAAEI,KAAK,EAALA;MAAM,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOK,GAAG,EAAE;MACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1BpB,GAAG,CAACO,MAAM,CAAC,GAAG,CAAC,CAACc,IAAI,CAAC,mBAAmB,CAAC;IAC7C;EACJ,CAAC;EAAA,iBAAAa,GAAA,EAAAC,GAAA;IAAA,OAAAT,KAAA,CAAAF,KAAA,OAAAC,SAAA;EAAA;AAAA,IAAC;AAEFW,MAAM,CAACC,OAAO,GAAG9C,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}