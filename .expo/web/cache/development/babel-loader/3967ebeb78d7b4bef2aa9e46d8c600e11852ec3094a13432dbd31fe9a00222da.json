{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { globalStyles } from \"../Style/globalFont\";\nimport { Ionicons } from '@expo/vector-icons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function ProfileScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    profile = _useState2[0],\n    setProfile = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    articles = _useState4[0],\n    setArticles = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    trades = _useState6[0],\n    setTrades = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isLoading = _useState8[0],\n    setIsLoading = _useState8[1];\n  useEffect(function () {\n    var fetchProfileData = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem('userToken');\n          if (token) {\n            var response = yield axios.get('http://localhost:5001/api/users/profile', {\n              headers: {\n                Authorization: `Bearer ${token}`\n              }\n            });\n            setProfile(response.data);\n          } else {\n            console.error('No token found');\n            Alert.alert('Error', 'No token found');\n          }\n        } catch (error) {\n          console.error('Erreur lors de la récupération des données :', error);\n          Alert.alert('Error', 'Failed to retrieve profile data');\n        } finally {\n          setIsLoading(false);\n        }\n      });\n      return function fetchProfileData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchProfileData();\n  }, []);\n  var styles = StyleSheet.create({});\n  return _jsx(View, {\n    style: styles.container,\n    children: isLoading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }) : _jsxs(ScrollView, {\n      contentContainerStyle: styles.scrollContent,\n      children: [profile ? _jsxs(View, {\n        style: styles.profileInfo,\n        children: [profile.profileImage ? _jsx(Image, {\n          source: {\n            uri: profile.profileImage\n          },\n          style: styles.profilePic\n        }) : _jsx(Image, {\n          source: require(\"../assets/profile-pic.jpg\"),\n          style: styles.profilePic\n        }), _jsxs(View, {\n          style: styles.profileDetails,\n          children: [_jsx(Text, {\n            style: styles.name,\n            children: profile.name\n          }), _jsx(Text, {\n            style: styles.city,\n            children: profile.city\n          }), _jsx(Text, {\n            style: styles.email,\n            children: profile.email\n          })]\n        })]\n      }) : _jsx(Text, {\n        children: \"Profil non disponible\"\n      }), articles && _jsx(View, {\n        style: styles.articlesGrid,\n        children: articles.map(function (article, index) {\n          return _jsx(View, {\n            style: styles.articleCard,\n            children: _jsx(Text, {\n              children: article.title\n            })\n          }, index);\n        })\n      }), trades && _jsx(View, {\n        children: trades.map(function (trade, index) {\n          return _jsx(View, {\n            children: _jsx(Text, {\n              children: trade.description\n            })\n          }, index);\n        })\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","View","Text","Image","StyleSheet","ScrollView","ActivityIndicator","Alert","axios","AsyncStorage","globalStyles","Ionicons","jsx","_jsx","jsxs","_jsxs","ProfileScreen","_ref","route","navigation","_useState","_useState2","_slicedToArray","profile","setProfile","_useState3","_useState4","articles","setArticles","_useState5","_useState6","trades","setTrades","_useState7","_useState8","isLoading","setIsLoading","fetchProfileData","_ref2","_asyncToGenerator","token","getItem","response","get","headers","Authorization","data","console","error","alert","apply","arguments","styles","create","style","container","children","size","color","contentContainerStyle","scrollContent","profileInfo","profileImage","source","uri","profilePic","require","profileDetails","name","city","email","articlesGrid","map","article","index","articleCard","title","trade","description"],"sources":["/Users/matveitabelev/Desktop/TROQUANTE/MonProjet/components/ProfileScreen.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, Image, StyleSheet, ScrollView, ActivityIndicator, Alert } from 'react-native';\nimport axios from 'axios';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { globalStyles } from '../Style/globalFont';\nimport { Ionicons } from '@expo/vector-icons'; \n\nexport function ProfileScreen({ route, navigation }) {\n  const [profile, setProfile] = useState(null);\n  const [articles, setArticles] = useState([]);\n  const [trades, setTrades] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // Nouvel état pour le chargement\n\n  useEffect(() => {\n    const fetchProfileData = async () => {\n      try {\n        const token = await AsyncStorage.getItem('userToken');\n        if (token) {\n          const response = await axios.get('http://localhost:5001/api/users/profile', {\n            headers: { Authorization: `Bearer ${token}` },\n          });\n          setProfile(response.data);\n          // ... (récupération des articles et trocs, comme avant)\n        } else {\n          console.error('No token found');\n          Alert.alert('Error', 'No token found');\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des données :', error);\n        Alert.alert('Error', 'Failed to retrieve profile data');\n      } finally {\n        setIsLoading(false); // Fin du chargement, que la requête réussisse ou échoue\n      }\n    };\n\n    fetchProfileData();\n  }, []);\n\n  const styles = StyleSheet.create({\n    // ...styles here\n  });\n\n  return (\n    <View style={styles.container}>\n      {isLoading ? (\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      ) : (\n        <ScrollView contentContainerStyle={styles.scrollContent}>\n          {/* Informations du profil */}\n          {profile ? (\n            <View style={styles.profileInfo}>\n              {profile.profileImage ? ( \n                <Image source={{ uri: profile.profileImage }} style={styles.profilePic} />\n              ) : (\n                <Image source={require('../assets/profile-pic.jpg')} style={styles.profilePic} />\n              )} \n              <View style={styles.profileDetails}>\n                <Text style={styles.name}>{profile.name}</Text>\n                <Text style={styles.city}>{profile.city}</Text>\n                <Text style={styles.email}>{profile.email}</Text>\n              </View>\n            </View>\n          ) : (\n            <Text>Profil non disponible</Text>\n          )}\n\n          {/* Articles */}\n          {articles && (\n            <View style={styles.articlesGrid}>\n              {articles.map((article, index) => (\n                <View key={index} style={styles.articleCard}>\n                  <Text>{article.title}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n\n          {/* Trocs passés */}\n          {trades && (\n            <View>\n              {trades.map((trade, index) => (\n                <View key={index}>\n                  <Text>{trade.description}</Text>\n                </View>\n              ))}\n            </View>\n          )}\n        </ScrollView>\n      )}\n    </View>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}