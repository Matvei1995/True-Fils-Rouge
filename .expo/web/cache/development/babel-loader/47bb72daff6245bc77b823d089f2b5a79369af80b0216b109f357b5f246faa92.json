{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Font from 'expo-font';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { WelcomeScreen } from \"./components/WelcomScreen\";\nimport { SignInScreen } from \"./components/SignInScreen\";\nimport { SignUpScreen } from \"./components/SignUpScreen\";\nimport { ProfileScreen } from \"./components/ProfileScreen\";\nimport { ConfirmationScreen } from \"./components/ConfirmationScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar styles = StyleSheet.create({\n  defaultText: {\n    fontFamily: 'Rowdies'\n  }\n});\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoggedIn = _useState2[0],\n    setIsLoggedIn = _useState2[1];\n  useEffect(function () {\n    var checkLoginStatus = function () {\n      var _ref = _asyncToGenerator(function* () {\n        try {\n          var token = yield AsyncStorage.getItem('userToken');\n          if (token) {\n            setIsLoggedIn(true);\n          }\n        } catch (error) {\n          console.error('Erreur lors de la vérification du statut de connexion :', error);\n        }\n      });\n      return function checkLoginStatus() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    checkLoginStatus();\n  }, []);\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    fontsLoaded = _useState4[0],\n    setFontsLoaded = _useState4[1];\n  useEffect(function () {\n    function loadFonts() {\n      return _loadFonts.apply(this, arguments);\n    }\n    function _loadFonts() {\n      _loadFonts = _asyncToGenerator(function* () {\n        yield Font.loadAsync({\n          'Rowdies': require(\"./assets/fonts/Rowdies-Regular.ttf\")\n        });\n        setFontsLoaded(true);\n      });\n      return _loadFonts.apply(this, arguments);\n    }\n    loadFonts();\n  }, []);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(NavigationContainer, {\n    screenOptions: {\n      headerShown: false,\n      contentStyle: styles.defaultText\n    },\n    children: _jsxs(Stack.Navigator, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Welcome\",\n        component: WelcomeScreen\n      }), _jsx(Stack.Screen, {\n        name: \"SignInScreen\",\n        component: SignInScreen\n      }), _jsx(Stack.Screen, {\n        name: \"SignUpScreen\",\n        component: SignUpScreen\n      }), _jsx(Stack.Screen, {\n        name: \"ProfileScreen\",\n        component: ProfileScreen\n      }), _jsx(Stack.Screen, {\n        name: \"Confirmation\",\n        component: ConfirmationScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","useEffect","AsyncStorage","Font","StyleSheet","Text","NavigationContainer","createStackNavigator","WelcomeScreen","SignInScreen","SignUpScreen","ProfileScreen","ConfirmationScreen","jsx","_jsx","jsxs","_jsxs","Stack","styles","create","defaultText","fontFamily","App","_useState","_useState2","_slicedToArray","isLoggedIn","setIsLoggedIn","checkLoginStatus","_ref","_asyncToGenerator","token","getItem","error","console","apply","arguments","_useState3","_useState4","fontsLoaded","setFontsLoaded","loadFonts","_loadFonts","loadAsync","require","screenOptions","headerShown","contentStyle","children","Navigator","Screen","name","component"],"sources":["/Users/matveitabelev/Desktop/TROQUANTE/MonProjet/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport * as Font from 'expo-font';\nimport { StyleSheet, Text } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { WelcomeScreen } from './components/WelcomScreen';\nimport { SignInScreen } from './components/SignInScreen';\nimport { SignUpScreen } from './components/SignUpScreen';\nimport { ProfileScreen } from './components/ProfileScreen';\nimport { ConfirmationScreen } from './components/ConfirmationScreen';\n\n\n\nconst Stack = createStackNavigator();\n\nconst styles = StyleSheet.create({\n  defaultText: {\n    fontFamily: 'Rowdies',\n  },\n});\nexport default function App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const checkLoginStatus = async () => {\n      try {\n        const token = await AsyncStorage.getItem('userToken'); // Ou la clé que vous utilisez\n        if (token) {\n          setIsLoggedIn(true);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la vérification du statut de connexion :', error);\n      }\n    };\n\n    checkLoginStatus();\n  }, []);\n\n  const [fontsLoaded, setFontsLoaded] = useState(false);\n\n  useEffect(() => {\n    async function loadFonts() {\n      await Font.loadAsync({\n        'Rowdies': require('./assets/fonts/Rowdies-Regular.ttf'), // Chemin vers votre fichier de police\n      });\n      setFontsLoaded(true);\n    }\n\n    loadFonts();\n  }, []);\n\n  if (!fontsLoaded) {\n    return null; // Ou un composant de chargement\n  }\n \n\n  return (\n    \n    <NavigationContainer screenOptions={{\n      headerShown: false, // Masquer l'en-tête par défaut de la navigation (optionnel)\n      contentStyle: styles.defaultText // Appliquer le style par défaut au contenu des écrans\n    }}>\n     \n      <Stack.Navigator >\n        <Stack.Screen name=\"Welcome\" component={WelcomeScreen} />\n        <Stack.Screen name=\"SignInScreen\"  component={SignInScreen} />\n        <Stack.Screen name=\"SignUpScreen\" component={SignUpScreen} />\n        <Stack.Screen  name=\"ProfileScreen\" component={ProfileScreen}  /> \n        <Stack.Screen name=\"Confirmation\" component={ConfirmationScreen} />\n         \n      </Stack.Navigator>\n   \n     \n    </NavigationContainer>\n    \n  );\n\n\n\n\n  \n\n \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}